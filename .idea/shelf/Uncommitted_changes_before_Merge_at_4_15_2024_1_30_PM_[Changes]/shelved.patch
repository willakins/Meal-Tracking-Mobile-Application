Index: app/src/main/java/com/views/RecipeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.views;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\n\r\nimport com.model.Ingredient;\r\nimport com.model.Recipe;\r\nimport com.model.Strategy.RecipeContext;\r\nimport com.model.User;\r\nimport com.viewmodels.CookBookViewModel;\r\nimport com.viewmodels.LoginViewModel;\r\nimport com.viewmodels.PantryViewModel;\r\nimport com.viewmodels.UserViewModel;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class RecipeFragment extends Fragment {\r\n    private static LoginViewModel loginViewModel;\r\n    private static UserViewModel userViewModel;\r\n    private static CookBookViewModel cookBook;\r\n    private static PantryViewModel pantry;\r\n    private Button submitRecipeButton;\r\n    private EditText editTextRecipeName;\r\n    private EditText editTextIngredients;\r\n    private HomeActivity currentContext;\r\n    private View view;\r\n    private RecyclerView recipesRecyclerView;\r\n    private RecipeAdapter recipeAdapter;\r\n    private RecipeContext recipeContext = new RecipeContext((recipes, pantry) -> recipes);\r\n    private Button sortNameButton;\r\n    private Button sortIngredientsButton;\r\n    private Button cookRecipeButton;\r\n\r\n\r\n    public RecipeFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        view = inflater.inflate(R.layout.fragment_recipe, container, false);\r\n        //Components of Recipe page\r\n\r\n        loginViewModel = LoginViewModel.getInstance();\r\n        userViewModel = UserViewModel.getInstance();\r\n        cookBook = CookBookViewModel.getInstance();\r\n        pantry = PantryViewModel.getInstance();\r\n        submitRecipeButton = view.findViewById(R.id.buttonSaveRecipe);\r\n        sortNameButton = view.findViewById(R.id.sortButton);\r\n        sortIngredientsButton = view.findViewById(R.id.filterButton);\r\n        editTextRecipeName = view.findViewById(R.id.editTextRecipeName);\r\n        editTextIngredients = view.findViewById(R.id.editTextIngredients);\r\n//        cookRecipeButton = view.findViewById(R.id.cookRecipeButton);\r\n\r\n        ArrayList<Recipe> recipes = userViewModel.getUser().getCookBook();\r\n        recipesRecyclerView = view.findViewById(R.id.recipesRecyclerView);\r\n        recipesRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        recipeAdapter = new RecipeAdapter(recipes, userViewModel.getUser()\r\n                .getPantry(), getContext(), recipe -> openRecipeDetails(recipe));\r\n        recipesRecyclerView.setAdapter(recipeAdapter);\r\n\r\n        submitRecipeButton.setOnClickListener(v -> {\r\n            cookBook.addRecipe(getContext(), editTextRecipeName, editTextIngredients);\r\n            editTextRecipeName.setText(\"\");\r\n            editTextIngredients.setText(\"\");\r\n            ArrayList<Recipe> newRecipes = userViewModel.getUser().getCookBook();\r\n            recipeAdapter = new RecipeAdapter(newRecipes, userViewModel.getUser()\r\n                    .getPantry(), getContext(), recipe -> openRecipeDetails(recipe));\r\n            recipesRecyclerView.setAdapter(recipeAdapter);\r\n        });\r\n\r\n        sortNameButton.setOnClickListener(v -> {\r\n            applySortStrategy();\r\n        });\r\n\r\n        sortIngredientsButton.setOnClickListener(v -> {\r\n            applyFilterStrategy();\r\n        });\r\n        return view;\r\n    }\r\n\r\n\r\n    /**\r\n     * Use this factory method to create a new instance of\r\n     * this fragment using the provided parameters.\r\n     *\r\n     * @return A new instance of fragment RecipeFragment.\r\n     */\r\n    public static RecipeFragment newInstance() {\r\n        RecipeFragment fragment = new RecipeFragment();\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n    }\r\n\r\n    public void setContext(HomeActivity context) {\r\n        this.currentContext = context;\r\n    }\r\n\r\n    private void applySortStrategy() {\r\n        userViewModel.getUser().getCookBook().sort((recipe1, recipe2) ->\r\n                recipe1.getName().compareToIgnoreCase(recipe2.getName()));\r\n        updateRecipeList(userViewModel.getUser().getCookBook());\r\n    }\r\n\r\n    private void applyFilterStrategy() {\r\n        ArrayList<Recipe> filteredRecipes = new ArrayList<>();\r\n        User user = userViewModel.getUser();\r\n        for (Recipe recipe : user.getCookBook()) {\r\n            boolean allIngredientsAvailable = true;\r\n            for (Ingredient ingredient : recipe.getIngredients()) {\r\n                int pantryIndex = user.locateIngredient(ingredient);\r\n                if (pantryIndex != -1) {\r\n                    Ingredient pantryIngredient = user.getPantry().get(pantryIndex);\r\n                    if (Integer.parseInt(pantryIngredient.getQuantity())\r\n                            < Integer.parseInt(ingredient.getQuantity())) {\r\n                        allIngredientsAvailable = false;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    allIngredientsAvailable = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (allIngredientsAvailable) {\r\n                filteredRecipes.add(recipe);\r\n            }\r\n        }\r\n        updateRecipeList(filteredRecipes);\r\n    }\r\n\r\n    private void updateRecipeList(ArrayList<Recipe> recipes) {\r\n        recipeAdapter = new RecipeAdapter(recipes, userViewModel.getUser()\r\n                .getPantry(), getContext(), recipe -> openRecipeDetails(recipe));\r\n        recipesRecyclerView.setAdapter(recipeAdapter);\r\n    }\r\n\r\n    private void openRecipeDetails(Recipe recipe) {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());\r\n        builder.setTitle(recipe.getName());\r\n        StringBuilder message = new StringBuilder(\"Total Calories: \" + recipe.getCalories()\r\n                + \"\\n\" + \"Ingredients Required:\\n\");\r\n        for (Ingredient ingredient : recipe.getIngredients()) {\r\n            message.append(\"- \").append(ingredient.getQuantity()).append(\" \")\r\n                    .append(ingredient.getName()).append(\"\\n\");\r\n        }\r\n        builder.setMessage(message.toString());\r\n        builder.setNegativeButton(\"Close\", (dialog, which) -> dialog.dismiss());\r\n        builder.setPositiveButton(\"Cook\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                // Call a function to remove ingredients from the user's account\r\n                cookRecipe(recipe);\r\n\r\n                // Dismiss the dialog\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n        AlertDialog dialog = builder.create();\r\n        dialog.show();\r\n    }\r\n\r\n    private void cookRecipe(Recipe recipe) {\r\n        ArrayList<Ingredient> usedIngredients = recipe.getIngredients();\r\n        User user = userViewModel.getUser();\r\n        ArrayList<Ingredient> pantry = user.getPantry();\r\n        for (Ingredient recipeIngredient : usedIngredients) {\r\n            // Check if the recipe ingredient exists in the user's pantry\r\n            for (Ingredient pantryIngredient : pantry) {\r\n                if (pantryIngredient.getName().equals(recipeIngredient.getName())) {\r\n                    // Convert the quantity from String to int\r\n                    int pantryQuantity = Integer.parseInt(pantryIngredient.getQuantity());\r\n                    int recipeQuantity = Integer.parseInt(recipeIngredient.getQuantity());\r\n\r\n                    // Decrement the quantity of the ingredient in the pantry\r\n                    pantryQuantity -= recipeQuantity;\r\n\r\n                    // If the quantity becomes zero, remove the ingredient from the pantry\r\n                    if (pantryQuantity <= 0) {\r\n                        pantry.remove(pantryIngredient);\r\n                    } else {\r\n                        // Update the quantity in the pantryIngredient object\r\n                        pantryIngredient.setQuantity(String.valueOf(pantryQuantity));\r\n                    }\r\n                    break; // Exit the loop since the ingredient has been found and updated\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/views/RecipeFragment.java b/app/src/main/java/com/views/RecipeFragment.java
--- a/app/src/main/java/com/views/RecipeFragment.java	(revision bd6c7307486c1480bf89673b00e09b4c2e1439ed)
+++ b/app/src/main/java/com/views/RecipeFragment.java	(date 1713202180135)
@@ -207,6 +207,6 @@
                 }
             }
         }
-
     }
+
 }
\ No newline at end of file
